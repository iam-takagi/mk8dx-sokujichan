buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'

group 'me.notsmatch.sokujichan'
version '1.0.2-SNAPSHOT'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "io.ktor:ktor-locations:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    compile "io.ktor:ktor-jackson:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"
    compile "io.ktor:ktor-html-builder:$ktor_version"
    compile "org.jetbrains:kotlin-css-jvm:1.0.0-pre.86-kotlin-1.3.50"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile 'net.dv8tion:JDA:4.1.1_156'
    compile 'com.jagrosh:jda-utilities:3.0.1'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.1'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Main-Class": mainClassName
    }
    baseName = project.name
    from {
        configurations
                .compile
                .findAll { !it.name.endsWith('pom') }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    with jar
}